Хранитель пустоты (Сайт визитка)
1. БД с таблицами:
	1.1 users(
		1.1.1 id - Идентификатор пользователя в базе,
		1.1.2 nickname - Уникальное значение (используется как логин на сайт),
		1.1.3 name - Имя пользователя (Видна при комментировании поста и в данных о пользователе в админке),
		1.1.4 surname - Фамилия пользователя,
		1.1.5 email - Уникальное поле (служит для восстановления пароля, посредством отправки ссылки с уникальным токеном),
		1.1.6 avatar - Картинка, которую пользователь видит в строке заголовка, если он залогинен на сайте,
		1.1.7 password - Хеш пароля пользователя (скрыт от посторонних глаз, даже админ не может его смотреть, да и не за чем),
		1.1.8 status - Статус пользователя (0 -админ, 1 - модератор, 2 - пользователь),
		1.1.9 token - Уникальный токен для восстановления пароля на сайте, ликная задумка и реализация),
	1.2 posts(
		1.2.1 id - Идентификатор записи на сайте,
		1.2.2 title - Заголовок записи,
		1.2.3 text - Текст записи,
		1.2.4 reading - Количество прочтений записи,
		1.2.5 image - Картинка поста, пока в общих картинках храниться),
	1.3 comments (
		1.3.1 id - Айди записи на сайте,
		1.3.2 post_id - Айди поста, который прокомментирован,
		1.3.3 name - Имя пользователя (если не зареган, если зареган - автоматом подставляются регистрационные данные),
		1.3.4 email - Почта пользователя (если не зареган, иначе аналогично имени),
		1.3.5 text - Сам коментарий,
		1.3.6 user_id - Айди пользователя на сайте,
		1.3.7 moder_id - Для админа (кто из модеров допустил в эфир или снял из него коммент),
		1.3.8 status - Статус коммента (0 - на проверке, 1 - в эфире, 2 - на удалении))
	1.4 messages (
		1.4.1 id - Айди записи на сайте,
    		1.4.2 user_from - Кто автор письма,
    		1.4.3 user_to - Кому письмо,
    		1.4.4 message - Текст самого письма,
    		1.4.5 date_message - Когда отправлено письмо,
    		1.4.6 date_read - Когда прочитано письмо)
2. Основной путь сайта:
	2.1 index.php
		2.1.1 Функционал загрузки картинок в папку /img/ (принимает с форм картинку, грузит и отдает её название в переменной avatar)
		2.1.2 Функционал роутера (подключается и передает управление всей дальнейшей логикой сайта в движок системы)
	2.2 /img/
		2.2.1 Директория картинок. (
			2.2.1.1 null.jpeg - Грустный слоник, картинка ошибки. Если нет какого-либо изображения, сайт подставляет его.)
			2.2.1.2 admin.gif - Админская аватарка. (при чистой инсталляции больше медиафайлов не планируется держать на первом этапе)
	2.3 /css/
		2.3.1 Директория css стиля для отображения содержимого страницы. (style.css)
	2.4 /image 
		2.4.1 Изображения шаблона
	2.5 .htaccess - Файл правил переадресаций для всего сайта. Содержимое в скобочках: (
		RewriteEngine On
		RewriteCond %{REQUEST_FILENAME} !-f
		RewriteRule . index.php)
3. Технический путь сайта:
	3.1 ../router
		3.1.1 Содержит основной роутер проекта, который определяет: Куда можно ходить пользователю, а куда нет.
			3.1.1.1 Включение сессии для работы с ней.
			3.1.1.2 Получение пути запроса, для инициализации названия контроллера.
			3.1.1.3 Выбор соответствующего контроллера и его подключение (Для работы с данными от моделек и пользовательскими вводимыми данными.)
			3.1.1.4 Включение рендера переноса содержимого системы отображения (views) в переменную от соответствующего контроллера
			3.1.1.5 Подкючение основного кода (views) main.php  для отображения содержимого страницы, согласно полученных ранее данных от контроллера.
	3.2 ../controllers
		3.2.1 index (Контроллер главной страницы проекта)
			3.2.1.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.1.2 - Подключение моделей начинаем тут (первая модель знает о меню. Каким оно должно быть) и выдает его код в переменную menu
			3.2.1.3 - Вторая модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.1.4 - Проверка на наличие всех таблиц в БД. И перенаправление на систему установки, если их нет.
			3.2.1.5 - Далее идут параметры порядка вывода постов на экран (обратный - новые посты первыми)
			3.2.1.6 - Запрос данных, по количеству ограничения в конфиге
			3.2.1.7 - Таблица запроса, и сам запрос с выводом результата в переменную posts
		3.2.2 post (контроллер страницы просмотра отдельного поста/записи)
			3.2.2.1 - Подключение моделей начинаем тут (первая модель знает о меню. Каким оно должно быть) и выдает его код в переменную menu
			3.2.2.2 - Вторая модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.2.3 - Опишем параметр запроса, в нашем случае: пришедший id записи.
			3.2.2.4 - База, откуда мы читаем посты. (posts)
			3.2.2.5 - Команда чтения поста с выводом в переменную post
			3.2.2.6 - Переменная page - индикация навигации для портала (Сайт визитка : page), добавление +1 просмотра (если мы находим пост). Ищем комментарии к конкретному посту, получаем их полным списком, включаем счетчик комментов. Если он не изменится, то фронт не будет перебирать массив с комментариями. Доп. обработка и перенос только опубликованных комментариев (status = 1) в массив для отправки на фронтенд. Плюс функция публикации комментария в этом же блоке, так как при отсутствии поста, и всё остальное подгружать не имеет смысла. Публикации: если есть текст комментария мы посмотрим наличие авторизации, если есть, то все данные затянем из бд на авторизованного пользователя. Иначе, предложим их вбить руками и примем их в БД в соответствующие поля. (комментарии администратора публикуются сразу)
			3.2.2.7 - Если не находим, то временная заглушка модуля переадреса внутри блока основного шаблона.
		3.2.3 register (Котроль авторизации и регистрации на сайте)
			3.2.3.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.3.2 - Модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.3.3 - Подключим переменную menu (она генерирует кнопку назад с инстркцией js скрипта на возврат по истории браузера на 1 пункт назад)
			3.2.3.4 - Операция Входа на сайт: проверяет, есть ли логин с паролем и не залогинен ли кто-то уже на сайте. Описиваем параметр запроса по логину. Если есть, то проверяем пароль на валидность тому, что в БД. Если все хорошо, то создадим параметры сессии для пользователя и поприветствуем его. Плюс затрем токен сброса пароля, коль его кто-то запросить мог. Если пароль не верен, то напишем сообщение о такой ситуации. Если пользователя нет, так же скажем об этом.
			3.2.3.5 - Операция регистрации на сайте, с проверкой присутствия на сайте, и занятостью почты, проверкой повтора пароля. Если все проверки успешны, то регистрируем, авторизуем и пишем сообщение на почту, что регистрация прошла успешно.
		3.2.4 logout (Функция выхода с сайта)
			3.2.4.1 - Функция генерации информационного сообщения при выходе с сайта
			3.2.4.2 - Команды очистки параметров сессии. (Можно удаление сессии проверить, проверил, оно пашет, но немного не так, как задумалось...)
		3.2.5 reset (Функционал сброса пароля)
			3.2.5.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.5.2 - Модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.5.3 - Подключим переменную menu (она генерирует кнопку назад с инстркцией js скрипта на возврат по истории браузера на 1 пункт назад)
			3.2.5.4 - Проверяем наличие логина. Если есть, то ищем такого пользователя. Формируем токен, пишем сообщение на почту и отправляем. Либо говорим, что пользователя нет.
			3.2.5.5 - Проверим наличие пароля при правильном токене. Переписали пароль и сбросили токен, написали сообщение об успехе, залогинили пользователя. Или не залогинили и перекинули на главную, если пользователя нет/токен не верный.
		3.2.6 admin (Контроллер панели пользователей)
			3.2.6.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.6.2 - Подключение моделей начинаем тут (первая модель знает о меню. Каким оно должно быть) и выдает его код в переменную menu
			3.2.6.3 - Вторая модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.6.4 - Получение залогиненного пользователя.
			3.2.6.5 - Функция удаления пользователя с сайта. (Админа удалить нельзя, остальные могут сами себя удалить, админ удалить может всех, кроме себя) удаляются все его комменты
			3.2.6.6 - Функция модерирования комментариев. (Присвоение статуса опубликовано или не опубликовано)
			3.2.6.7 - Функция изменения комментариев. (каждый пользователь может править текст своего комментария, админ и модер могут править имя написавшего и текст коммента)
			3.2.6.8 - Функция модификации пользователя (Изменение личных данных, аватаров и т.п.)
			3.2.6.9 - Функция удаления комментариев (полноценное удаление доступно только админу, остальные меняют статус на 2)
			3.2.6.10 - Функция изменения статуса пользователя (модер или пользователь, доступна только админам)
			3.2.6.11 - Функция изменения поста (для админа редактировать запись)
			3.2.6.12 - Сброс счетчика прочтений у поста (только админам)
			3.2.6.13 - Сброс картинки у поста (только админам, удалить картинку к посту)
			3.2.6.14 - Сброс аватара пользователя (Каждый у себя, кроме админки, админ может сам скинуть картинку у любого юзера)
			3.2.6.15 - Функция добавления поста (только админские права)
			3.2.6.16 - Функция удаления поста (с удалением комментов к нему)
			3.2.6.17 - Блок проверки статуса и присвоение нужных функций каждому типу пользователя.
		3.2.7 setup (Установка на хостинг)
			3.2.7.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.7.2 - Проверка наличия информации о портале. Если ее нет, то подключение модели конфига и БД.
			3.2.7.3 - Проверим наличие таблиц, если есть, то уходим, а нет, значит проверим флаг установки.
			3.2.7.4 - Если флаг присутствует, то чистим БД, записываем таблицы, читаем и вносим данные админа, конфигурим таблички.
			3.2.7.5 - Уводим на главную, без авторизации.
		3.2.8 messages
			3.2.8.1 - Переменная page - индикация навигации для портала (Сайт визитка : page)
			3.2.8.2 - Подключение моделей начинаем тут (первая модель знает о меню. Каким оно должно быть) и выдает его код в переменную menu
			3.2.8.3 - Вторая модель подключает конфиг портала, базу данных и CRUD операции.
			3.2.8.4 - После проверки авторизации, получаем список сообщений, число сообщений в базе с авторизованным отправителем, и принимаем список пользователей из БД за вычетом отправителя.
			3.2.8.5 - Система записи сообщения с проверкой лимита
			3.2.8.6 - Система удаления сообщения с проверкой прав на него
			3.2.8.7 - Система чтения сообщения с проверкой прав.
	3.3 ../models
		3.3.1 menu
			3.3.1.1 - Проверка на наличии авторизации и генерация соответствующего содержимого переменной меню.
		3.3.2 mysql
			3.3.2.1 - Система парсинга конфига сайта.
			3.3.2.2 - Разложим его по переменным.
			3.3.2.3 - Подключение к БД. С параметрами из конфига.
			3.3.2.4 - CRUD операции, свободный запрос и установщик.
		3.3.3 render
			3.3.3.1 - Рендер в новый объект. и его помещение в переменную для странички.
	3.4 ../views
		3.4.1 admin (Система отображения информации для администратора)
		3.4.2 index (Главная страница)
		3.4.3 register (Блок регистрации на сайте)
		3.4.4 logout (Блок выхода с сайта)
		3.4.5 main (Основной шаблон сайта)
		3.4.6 moder (Блок для модератора)
		3.4.7 post (Отдельная запись)
		3.4.8 reset (Сброс пароля)
		3.4.9 user (Пользовательский вывод)
		3.4.10 setup (Форма ввода данных об админе)
		3.4.11 messages (Страница с сообщениями)
